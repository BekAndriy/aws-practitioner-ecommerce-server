service: phoneforyou-import-service

frameworkVersion: "3"

provider:
  name: aws
  stage: dev
  runtime: nodejs18.x
  timeout: 15
  memorySize: 512
  region: eu-central-1
  environment:
    BUCKET_NAME: ${self:custom.BucketName}
    BUCKET_REGION: ${self:provider.region}
    SQS_QUEUE_URL:
      Fn::Join:
        - ""
        - - "https://sqs."
          - Ref: AWS::Region
          - ".amazonaws.com/"
          - Ref: AWS::AccountId
          - /${self:custom.SQSQueueName}
  iam:
    role: ImportServicePolicy

custom:
  BucketName: aws-practitioner-import-service
  SQSQueueName: CatalogItemsQueue

package:
  individually: true
  exclude:
    - ./**

functions:
  importProductsFile:
    handler: dist/src/handlers/importProductsFile.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /import
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  # temporary for task-7 auth
  importProductsPrivateFile:
    handler: dist/src/handlers/importProductsFile.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /import-private
          method: GET
          cors: true
          authorizer:
            type: CUSTOM
            # connect auth service
            authorizerId:
              Ref: Authorizer
            identitySource: method.request.header.Authorization
          request:
            parameters:
              querystrings:
                name: true
  importProductsCognitoFile:
    handler: dist/src/handlers/importProductsFile.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /import-cognito
          method: GET
          cors: true
          authorizer:
            # connect auth service
            # arn: !GetAtt CognitoAuthorizer.Arn
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::ImportValue: ${self:provider.stage}-CognitoPoolArn
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: dist/src/handlers/importFileParser.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - s3:
          bucket: ${self:custom.BucketName}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploaded/
            - suffix: .csv
resources:
  Resources:
    ImportServicePolicy:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdasImportServiceAccess # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ImportServiceAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.BucketName}/uploaded/*
                    - arn:aws:s3:::${self:custom.BucketName}/parsed/*
          # allows to send messages to sqs queue
          - PolicyName: ImportServiceSQSAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sqs:GetQueueUrl"
                    - "sqs:SendMessage"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - arn
                        - aws
                        - sqs
                        - Ref: AWS::Region
                        - Ref: AWS::AccountId
                        - ${self:custom.SQSQueueName}
    # connect current APIGateway to the external auth service
    # this code can be copied to other configurations if other API need to be connected to the same auth
    Authorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        # don't cache
        AuthorizerResultTtlInSeconds: 0
        AuthorizerUri:
          # use imported URI from auth service
          Fn::ImportValue: ${self:provider.stage}-AuthorizerUri
        Type: TOKEN
        IdentitySource: method.request.header.Authorization
        IdentityValidationExpression: .+
        Name: ${self:provider.stage}-BasicAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
    # Custom Authorizer created by CloudFormation
    # It is not needed for current implementation as serverless generates own authorizer
    # CognitoAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     # don't cache
    #     AuthorizerResultTtlInSeconds: 0
    #     IdentitySource: method.request.header.Authorization
    #     IdentityValidationExpression: .+
    #     Name: ${self:provider.stage}-CognitoAuthorizer
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - Fn::ImportValue: ${self:provider.stage}-CognitoPoolArn
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    ApiGatewayRestApiDefaultHeaders:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_4XX"
        RestApiId:
          Ref: ApiGatewayRestApi
