service: phoneforyou-products-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  timeout: 15
  memorySize: 512
  region: eu-central-1
  environment:
    DB_PRODUCTS_TABLE_NAME: !Ref DynamoDBProductsTable
    DB_STOCKS_TABLE_NAME: !Ref DynamoDBStocksTable
    SQS_QUEUE_URL: !Ref CatalogItemsQueue
    TOPIC_ARN: !Ref SNSProductTopic
  iam:
    role: ProductsServicePolicy

plugins:
  - serverless-s3-deploy
  - serverless-s3-cleaner
custom:
  stage: dev
  openApiBucketName: phoneforyou-openapi
  assets:
    targets:
      - bucket: !Ref SwaggerBucket
        files:
          - source: openapi
            empty: true
            globs: "**/*"
  snsSubscribers: ${file(./subscribers.yml)}
  serverless-s3-cleaner:
    buckets:
      - ${self:custom.openApiBucketName}
package:
  individually: true
  exclude:
    - ./**

functions:
  getProductsList:
    handler: dist/src/handlers/getProductsList.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /products
          method: GET
          cors: true
  createProduct:
    handler: dist/src/handlers/createProduct.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /products
          method: POST
          cors: true
  updateProduct:
    handler: dist/src/handlers/updateProduct.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /products/{id}
          method: PUT
          cors: true
  deleteProduct:
    handler: dist/src/handlers/deleteProduct.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /products/{id}
          method: DELETE
          cors: true
  getProductsById:
    handler: dist/src/handlers/getProductsById.handler
    url: true
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - http:
          path: /products/{id}
          method: GET
          cors: true
  catalogBatchProcess:
    handler: dist/src/handlers/catalogBatchProcess.handler
    package:
      include:
        - dist/**
      exclude:
        - dist/package-lock.json
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          # delay for gathering messages before send
          maximumBatchingWindow: 30
          batchSize: 5

resources:
  Resources:
    DynamoDBProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          # primary key
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          # restrict reading from the unit till 5 req per second
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
    DynamoDBStocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          # primary key
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          # restrict reading from the unit till 5 req per second
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
    ProductsServicePolicy:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ProductsServicePolicyAccess # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ProductServiceDynamoDBAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
          - PolicyName: ProductServiceSQSAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sqs:GetQueueUrl"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                    - "sqs:ReceiveMessage"
                  Resource:
                    Fn::Join:
                      - " "
                      - - Fn::GetAtt:
                            - CatalogItemsQueue
                            - Arn
          - PolicyName: ProductServiceSNSAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource: !Ref SNSProductTopic

    SwaggerBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.openApiBucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
    SwaggerParamsRequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: ParameterRequestValidator
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: false
    SwaggerRootResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        RestApiId: !Ref ApiGatewayRestApi
        PathPart: "openapi"
    SwaggerProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref SwaggerRootResource
        RestApiId: !Ref ApiGatewayRestApi
        PathPart: "{proxy+}"
    SwaggerRootMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId: !Ref SwaggerRootResource
        RestApiId: !Ref ApiGatewayRestApi
        AuthorizationType: NONE
        HttpMethod: ANY
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: http://${self:custom.openApiBucketName}.s3-website.${self:provider.region}.amazonaws.com
          PassthroughBehavior: WHEN_NO_MATCH
    SwaggerProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId: !Ref SwaggerProxyResource
        RestApiId: !Ref ApiGatewayRestApi
        AuthorizationType: NONE
        HttpMethod: ANY
        RequestParameters:
          method.request.path.proxy: true
        RequestValidatorId:
          Ref: SwaggerParamsRequestValidator
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: http://${self:custom.openApiBucketName}.s3-website.${self:provider.region}.amazonaws.com/{proxy}
          PassthroughBehavior: WHEN_NO_MATCH
          RequestParameters:
            integration.request.path.proxy: "method.request.path.proxy"
    SwaggerS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SwaggerBucket
        PolicyDocument:
          Statement:
            - Sid: "AllowPublicReadAccess"
              Effect: Allow
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:custom.openApiBucketName}/*
              Principal: "*"
    CatalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "CatalogItemsQueue"
    SNSProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
    # subscriber for success created products
    SNSProductTopicSuccessSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.snsSubscribers.successSubscriber}
        Protocol: email
        FilterPolicy:
          productsStatus:
            - success
        TopicArn: !Ref SNSProductTopic
    # subscriber for failed created products
    SNSProductTopicErrorSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.snsSubscribers.errorSubscriber}
        Protocol: email
        FilterPolicy:
          productsStatus:
            - error
        TopicArn: !Ref SNSProductTopic
  Outputs:
    SwaggerBucketOutput:
      Description: Products service API endpoint
      Value: !Ref SwaggerRootResource
